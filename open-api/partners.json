{
  "swagger": "2.0",
  "info": {
    "description": "This API allows partner cloud marketplaces to create and manage both Reseller and Customer accounts, as well as place orders of select Adobe products for those Customers. Before placing an Order, both a Reseller and Customer account must exist. Each Customer must be tied to a Reseller, and each Reseller must be tied to a Distributor.",
    "version": "1.0.0",
    "title": "Commerce Partner API"
  },
  "host": "partners-stage.adobe.io",
  "basePath": "/",
  "tags": [
    {
      "name": "Customer Accounts",
      "description": "Customer Account Controller V 2"
    },
    {
      "name": "Orders",
      "description": "Customer Order Controller V 3"
    },
    {
      "name": "Resellers",
      "description": "Reseller Account Controller V 2"
    },
    {
      "name": "Subscriptions",
      "description": "Customer Subscription Controller V 2"
    },
    {
      "name": "Transfers",
      "description": "Membership Controller V 2"
    }
  ],
  "paths": {
    "/v2/customers": {
      "post": {
        "tags": [
          "Customer Accounts"
        ],
        "summary": "Create Customer Account",
        "description": "Prior to an order being placed, a Reseller creates an account for a Customer and the marketplace calls Create Customer Account. The customer resource is returned with link to Get Customer Account Details",
        "operationId": "createCustomerAccountUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Create Customer Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/customers/{customer-id}": {
      "get": {
        "tags": [
          "Customer Accounts"
        ],
        "summary": "Get Customer Account Details",
        "description": "Finds specified customer account by account ID.",
        "operationId": "findAccountByCustomerIdUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get Customer Account Details Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Account for accountId"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer Accounts"
        ],
        "summary": "Update Customer Account",
        "description": "The end customerâ€™s address and contact information can be updated through a call to Update Customer Account.",
        "operationId": "updateAccountUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Update Customer Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Account for accountId"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/customers/{customer-id}/orderpreviews": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Preview an order",
        "description": "Preview an order",
        "operationId": "createOrderPreviewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preview Order Request Accepted Successfully",
            "schema": {
              "$ref": "#/definitions/OrderResource"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/customers/{customer-id}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order History",
        "description": "Get Order History",
        "operationId": "findOrdersUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Order History Request Processed Successfully",
            "schema": {
              "$ref": "#/definitions/OrderHistoryResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Orders"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Creates an order",
        "description": "Creates an order",
        "operationId": "createOrderUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Create Order Request Accepted Successfully"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/customers/{customer-id}/orders/{order-id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order Details",
        "description": "Get Order Details",
        "operationId": "findOrderUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "order-id",
            "in": "path",
            "description": "order-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Order Details Request Processed Successfully",
            "schema": {
              "$ref": "#/definitions/OrderResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Order"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel Order",
        "description": "Cancel an Order for a Customer",
        "operationId": "cancelOrderUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          {
            "name": "order-id",
            "in": "path",
            "description": "order-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderResource"
            }
          },
          "202": {
            "description": "Cancel Order Request Accepted Successfully"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Cancel Order"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/customers/{customer-id}/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get All Subscriptions for a Customer",
        "description": "Get All Subscriptions for a Customer with a corresponding Customer ID.",
        "operationId": "findSubscriptionsUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get All Subscriptions for a Customer Request Successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionHistoryResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Get All Subscriptions for a Customer"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/customers/{customer-id}/subscriptions/{subscription-id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get Subscription Details",
        "description": "Get Subscription Details with corresponding Customer ID and Subsciption ID. Can receive the current quantity, autorenewal status, creation date, and more.",
        "operationId": "findSubscriptionUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-id",
            "in": "path",
            "description": "subscription-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get Subscription Details Request Successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Subscription"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update Subscription Auto-Renewal",
        "description": "Update the auto renewal status and quantity of licenses to renew. Subscriptions that are created by an order will be set to auto-renew by default.",
        "operationId": "updateSubscriptionAutoRenewalUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "subscription",
            "description": "subscription",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          {
            "name": "subscription-id",
            "in": "path",
            "description": "subscription-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Update Subscription Auto-Renewal Request Successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Update Subscription Auto-Renewal"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/memberships/{membership-id}/offers": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Preview Offers for Transfer for a Membership ID",
        "description": "Preview Offers for Transfer for a Membership ID",
        "operationId": "previewOffersUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "ignore-order-return",
            "in": "query",
            "description": "ignore-order-return",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "membership-id",
            "in": "path",
            "description": "membership-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Preview Offers for Transfer for Membership ID Request Successfully",
            "schema": {
              "$ref": "#/definitions/TransferOffersPreviewResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Preview Offers for Transfer for Membership ID"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/memberships/{membership-id}/transfers": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Transfer Subscriptions",
        "description": "Transfer Subscriptions",
        "operationId": "createTransferUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "ignore-order-return",
            "in": "query",
            "description": "ignore-order-return",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "membership-id",
            "in": "path",
            "description": "membership-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "transferOffers",
            "description": "transferOffers",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferOffers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TransferOffers"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Transfer Subscriptions Request Accepted Successfully"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/memberships/{membership-id}/transfers/{transfer-id}": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get Transfer details for a Membership ID and Transfer ID",
        "description": "Get Transfer details for a Membership ID and Transfer ID",
        "operationId": "getTransferUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "membership-id",
            "in": "path",
            "description": "membership-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "transfer-id",
            "in": "path",
            "description": "transfer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get Transfer details for a Membership ID and Transfer ID Request Successfully",
            "schema": {
              "$ref": "#/definitions/TransferOffersResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Get Transfer details for a Membership ID and Transfer ID"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/resellers": {
      "post": {
        "tags": [
          "Resellers"
        ],
        "summary": "Create Reseller Account",
        "description": "Upon joining marketplace, if a Reseller accepts T&C, marketplace creates an account for reseller with Create Reseller Account.The reseller account will be assigned to a specified Distributor  ID and be able to specify company profile, contacts, and more.",
        "operationId": "createResellerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Create Reseller Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/resellers/{account-id}/accept/{approval-code}": {
      "get": {
        "tags": [
          "Resellers"
        ],
        "summary": "Get Reseller Change Preview",
        "description": "Checks approval code, returns subscriptions",
        "operationId": "checkResellerChangeUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account-id",
            "in": "path",
            "description": "account-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "approval-code",
            "in": "path",
            "description": "approval-code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Reseller Approval Code is valid",
            "schema": {
              "$ref": "#/definitions/SubscriptionHistoryResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Resellers"
        ],
        "summary": "Execute Reseller Change",
        "description": "Applies reseller change",
        "operationId": "executeResellerChangeUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account-id",
            "in": "path",
            "description": "account-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "approval-code",
            "in": "path",
            "description": "approval-code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResellerChange Approval Code was used to move customer to target reseller",
            "schema": {
              "$ref": "#/definitions/ResellerChangeExecutionDto"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v2/resellers/{reseller-id}": {
      "get": {
        "tags": [
          "Resellers"
        ],
        "summary": "Get Reseller Account",
        "description": "Gets Reseller Account corresponding to the matching Account ID. This will include account info such as distributor/reseller ID, company profile information, and more.",
        "operationId": "findAccountByResellerIdUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reseller-id",
            "in": "path",
            "description": "reseller-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Find Reseller Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to find Reseller Account for resellerId"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Resellers"
        ],
        "summary": "Update Reseller Account",
        "description": "Update Reseller Account information. Personal details such as address, city, phone number, etc. can be updated. Administrative details such as contacts, company name, and more can be updated as well.",
        "operationId": "updateResellerUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          {
            "name": "reseller-id",
            "in": "path",
            "description": "reseller-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Update Reseller Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/customers": {
      "post": {
        "tags": [
          "Customer Accounts"
        ],
        "summary": "Create Customer Account",
        "description": "Prior to an order being placed, a Reseller creates an account for a Customer and the marketplace calls Create Customer Account. The customer resource is returned with link to Get Customer Account Details",
        "operationId": "createCustomerAccountUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Create Customer Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/customers/{customer-id}": {
      "get": {
        "tags": [
          "Customer Accounts"
        ],
        "summary": "Get Customer Account Details",
        "description": "Finds specified customer account by account ID.",
        "operationId": "findAccountByCustomerIdUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get Customer Account Details Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Account for accountId"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer Accounts"
        ],
        "summary": "Update Customer Account",
        "description": "The end customerâ€™s address and contact information can be updated through a call to Update Customer Account.",
        "operationId": "updateAccountUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Update Customer Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Account for accountId"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/customers/{customer-id}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order History",
        "description": "Get Order History",
        "operationId": "findOrdersUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "end-date",
            "in": "query",
            "description": "end-date",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offer-id",
            "in": "query",
            "description": "offer-id",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "order-type",
            "in": "query",
            "description": "order-type",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reference-order-id",
            "in": "query",
            "description": "reference-order-id",
            "required": false,
            "type": "string"
          },
          {
            "name": "start-date",
            "in": "query",
            "description": "start-date",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "status",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "subscription-id",
            "in": "query",
            "description": "subscription-id",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Order History Request Processed Successfully",
            "schema": {
              "$ref": "#/definitions/OrderHistoryResource"
            }
          },
          "400": {
            "description": "Bad "
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Orders"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Creates an order",
        "description": "Creates an order",
        "operationId": "createOrderUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Create Order Request Accepted Successfully"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/customers/{customer-id}/orders/{order-id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order Details",
        "description": "Get Order Details",
        "operationId": "findOrderUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "order-id",
            "in": "path",
            "description": "order-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Order Details Request Processed Successfully",
            "schema": {
              "$ref": "#/definitions/OrderResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Order"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update externalReferenceId of order",
        "description": "Update externalReferenceId of Order",
        "operationId": "updateOrderUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          {
            "name": "order-id",
            "in": "path",
            "description": "order-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ExternalId Updated Successfully",
            "schema": {
              "$ref": "#/definitions/OrderResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Order"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/customers/{customer-id}/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get All Subscriptions for a Customer",
        "description": "Get All Subscriptions for a Customer with a corresponding Customer ID.",
        "operationId": "findSubscriptionsUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get All Subscriptions for a Customer Request Successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionHistoryResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Get All Subscriptions for a Customer"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/customers/{customer-id}/subscriptions/{subscription-id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get Subscription Details",
        "description": "Get Subscription Details with corresponding Customer ID and Subsciption ID. Can receive the current quantity, autorenewal status, creation date, and more.",
        "operationId": "findSubscriptionUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "subscription-id",
            "in": "path",
            "description": "subscription-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get Subscription Details Request Successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Find Customer Subscription"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update Subscription Auto-Renewal",
        "description": "Update the auto renewal status and quantity of licenses to renew. Subscriptions that are created by an order will be set to auto-renew by default.",
        "operationId": "updateSubscriptionAutoRenewalUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "customer-id",
            "in": "path",
            "description": "customer-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "subscription",
            "description": "subscription",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          {
            "name": "subscription-id",
            "in": "path",
            "description": "subscription-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Update Subscription Auto-Renewal Request Successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Update Subscription Auto-Renewal"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/memberships/{membership-id}/offers": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Preview Offers for Transfer for a Membership ID",
        "description": "Preview Offers for Transfer for a Membership ID",
        "operationId": "previewOffersUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "ignore-order-return",
            "in": "query",
            "description": "ignore-order-return",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "membership-id",
            "in": "path",
            "description": "membership-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Preview Offers for Transfer for Membership ID Request Successfully",
            "schema": {
              "$ref": "#/definitions/TransferOffersPreviewResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Preview Offers for Transfer for Membership ID"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/memberships/{membership-id}/transfers": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Transfer Subscriptions",
        "description": "Transfer Subscriptions",
        "operationId": "createTransferUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "ignore-order-return",
            "in": "query",
            "description": "ignore-order-return",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "membership-id",
            "in": "path",
            "description": "membership-id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "transferOffers",
            "description": "transferOffers",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferOffers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TransferOffers"
            }
          },
          "201": {
            "description": "Created"
          },
          "202": {
            "description": "Transfer Subscriptions Request Accepted Successfully"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/memberships/{membership-id}/transfers/{transfer-id}": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Get Transfer details for a Membership ID and Transfer ID",
        "description": "Get Transfer details for a Membership ID and Transfer ID",
        "operationId": "getTransferUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "membership-id",
            "in": "path",
            "description": "membership-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "transfer-id",
            "in": "path",
            "description": "transfer-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Get Transfer details for a Membership ID and Transfer ID Request Successfully",
            "schema": {
              "$ref": "#/definitions/TransferOffersResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to Get Transfer details for a Membership ID and Transfer ID"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/resellers": {
      "post": {
        "tags": [
          "Resellers"
        ],
        "summary": "Create Reseller Account",
        "description": "Upon joining marketplace, if a Reseller accepts T&C, marketplace creates an account for reseller with Create Reseller Account.The reseller account will be assigned to a specified Distributor  ID and be able to specify company profile, contacts, and more.",
        "operationId": "createResellerUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Create Reseller Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/resellers/{account-id}/accept/{approval-code}": {
      "get": {
        "tags": [
          "Resellers"
        ],
        "summary": "Get Reseller Change Preview",
        "description": "Checks approval code, returns subscriptions",
        "operationId": "checkResellerChangeUsingGET_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account-id",
            "in": "path",
            "description": "account-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "approval-code",
            "in": "path",
            "description": "approval-code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Reseller Approval Code is valid",
            "schema": {
              "$ref": "#/definitions/SubscriptionHistoryResource"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Resellers"
        ],
        "summary": "Execute Reseller Change",
        "description": "Applies reseller change",
        "operationId": "executeResellerChangeUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "account-id",
            "in": "path",
            "description": "account-id",
            "required": true,
            "type": "string"
          },
          {
            "name": "approval-code",
            "in": "path",
            "description": "approval-code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ResellerChange Approval Code was used to move customer to target reseller",
            "schema": {
              "$ref": "#/definitions/ResellerChangeExecutionDto"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/v3/resellers/{reseller-id}": {
      "get": {
        "tags": [
          "Resellers"
        ],
        "summary": "Get Reseller Account",
        "description": "Gets Reseller Account corresponding to the matching Account ID. This will include account info such as distributor/reseller ID, company profile information, and more.",
        "operationId": "findAccountByResellerIdUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "reseller-id",
            "in": "path",
            "description": "reseller-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Find Reseller Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "404": {
            "description": "Unable to find Reseller Account for resellerId"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Resellers"
        ],
        "summary": "Update Reseller Account",
        "description": "Update Reseller Account information. Personal details such as address, city, phone number, etc. can be updated. Administrative details such as contacts, company name, and more can be updated as well.",
        "operationId": "updateResellerUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "account",
            "description": "account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          {
            "name": "reseller-id",
            "in": "path",
            "description": "reseller-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed Update Reseller Account Request Successfully",
            "schema": {
              "$ref": "#/definitions/AccountResource"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Request could not be processed because of bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Api Key is invalid"
          },
          "500": {
            "description": "Error with external dependency or network"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "x-api-key": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    },
    "x-api-key": {
      "type": "apiKey",
      "name": "x-api-key",
      "in": "header"
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "companyProfile"
      ],
      "properties": {
        "benefits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Benefit"
          }
        },
        "companyProfile": {
          "$ref": "#/definitions/CompanyProfile"
        },
        "cotermDate": {
          "type": "string",
          "pattern": "^(\\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01]))?$"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "type": "string",
          "pattern": "^[\\p{L}\\d\\-]{4,40}$"
        },
        "discounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractDiscountLevel"
          }
        },
        "distributorId": {
          "type": "string",
          "pattern": "^[\\p{L}\\d\\-]{4,40}$"
        },
        "externalReferenceId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 35,
          "pattern": "^[^<>[\\\"]]*$"
        },
        "resellerId": {
          "type": "string",
          "pattern": "^[\\p{L}\\d\\-]{4,40}$"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "Account"
    },
    "AccountResource": {
      "type": "object",
      "properties": {
        "benefits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Benefit"
          }
        },
        "companyProfile": {
          "$ref": "#/definitions/CompanyProfile"
        },
        "cotermDate": {
          "type": "string",
          "example": "yyyy-MM-dd"
        },
        "creationDate": {
          "type": "string",
          "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
        },
        "customerId": {
          "type": "string"
        },
        "discounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractDiscountLevel"
          }
        },
        "distributorId": {
          "type": "string"
        },
        "externalReferenceId": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "resellerId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "AccountResource"
    },
    "Address": {
      "type": "object",
      "required": [
        "addressLine1",
        "city",
        "country",
        "postalCode",
        "region"
      ],
      "properties": {
        "addressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "pattern": "^[^<>[\\\"]]*$"
        },
        "addressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "pattern": "^[^<>[\\\"]]*$"
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 40,
          "pattern": "^[^<>[\\\"]]*$"
        },
        "country": {
          "type": "string",
          "minLength": 0,
          "maxLength": 3
        },
        "phoneNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 40,
          "pattern": "^[^<>[\\\"]]*$"
        },
        "postalCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "region": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      },
      "title": "Address"
    },
    "AutoRenewal": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "renewalQuantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "AutoRenewal"
    },
    "Benefit": {
      "type": "object",
      "properties": {
        "commitment": {
          "$ref": "#/definitions/CommitmentTerm"
        },
        "commitmentRequest": {
          "$ref": "#/definitions/CommitmentTerm"
        },
        "recommitmentRequest": {
          "$ref": "#/definitions/CommitmentTerm"
        },
        "type": {
          "type": "string",
          "enum": [
            "THREE_YEAR_COMMIT"
          ]
        }
      },
      "title": "Benefit"
    },
    "CommitmentQuantity": {
      "type": "object",
      "properties": {
        "offerType": {
          "type": "string",
          "enum": [
            "CONSUMABLES",
            "LICENSE"
          ]
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CommitmentQuantity"
    },
    "CommitmentTerm": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "minimumQuantities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommitmentQuantity"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "CommitmentTerm"
    },
    "CompanyProfile": {
      "type": "object",
      "required": [
        "address",
        "companyName",
        "preferredLanguage"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "companyName": {
          "type": "string",
          "pattern": "^[\\p{L}\\p{N}_ ã€€,.ï¼†&ãƒ»\\'()ï¼ˆï¼‰\\\"\\/-]{3,250}$"
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "marketSegment": {
          "type": "string",
          "pattern": "COM|EDU|GOV"
        },
        "marketSegments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "marketSubSegments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "preferredLanguage": {
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      },
      "title": "CompanyProfile"
    },
    "Contact": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "properties": {
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 240,
          "pattern": "(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
        },
        "firstName": {
          "type": "string",
          "pattern": "^[\\p{L}\\p{N}-_ ã€€,.ï¼†&'\\\"]{1,35}$"
        },
        "lastName": {
          "type": "string",
          "pattern": "^[\\p{L}\\p{N}-_ ã€€,.ï¼†&'\\\"]{1,35}$"
        },
        "phoneNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      },
      "title": "Contact"
    },
    "ContractDiscountLevel": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "offerType": {
          "type": "string"
        }
      },
      "title": "ContractDiscountLevel"
    },
    "LicenseDto": {
      "type": "object",
      "required": [
        "licenseId",
        "subscriptionId"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "createdSource": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "licenseId": {
          "type": "string",
          "example": "asl843ah8gha75hga74awu839rhf84ad",
          "description": "License ID",
          "pattern": "^[\\p{Alnum}\\-]{10,50}$"
        },
        "licenseStatus": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "CANCELLED"
          ]
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "modifiedBy": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "modifiedSource": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "subscriptionId": {
          "type": "string",
          "example": "asl843ah8gha75hga74awu839rhf84ad",
          "description": "Subscription ID",
          "pattern": "^[\\p{Alnum}]{32}$"
        }
      },
      "title": "LicenseDto"
    },
    "Order": {
      "type": "object",
      "required": [
        "currencyCode"
      ],
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "currencyCode": {
          "type": "string",
          "pattern": "^[A-Z]{3}$"
        },
        "customerId": {
          "type": "string"
        },
        "externalReferenceId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 35,
          "pattern": "^[^<>[\\\"]]*$"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineItemDto"
          }
        },
        "orderId": {
          "type": "string"
        },
        "orderSource": {
          "type": "string",
          "enum": [
            "MARKETPLACE",
            "NO_DISCOUNT",
            "SUBSCRIPTION_SERVICE"
          ]
        },
        "orderType": {
          "type": "string",
          "enum": [
            "NEW",
            "PREVIEW",
            "PREVIEW_RENEWAL",
            "RENEWAL",
            "RETURN",
            "TRANSFER"
          ]
        },
        "reason": {
          "type": "string"
        },
        "referenceOrderId": {
          "type": "string"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "status": {
          "type": "string"
        }
      },
      "title": "Order"
    },
    "OrderHistory": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "OrderHistory"
    },
    "OrderHistoryResource": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderResource"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "OrderHistoryResource"
    },
    "OrderLineItemDto": {
      "type": "object",
      "properties": {
        "extLineItemNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 999999,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "offerId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 999999,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "status": {
          "type": "string"
        },
        "subscription": {
          "$ref": "#/definitions/Subscription"
        },
        "subscriptionId": {
          "type": "string"
        }
      },
      "title": "OrderLineItemDto"
    },
    "OrderLineItemResource": {
      "type": "object",
      "properties": {
        "extLineItemNumber": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "offerId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      },
      "title": "OrderLineItemResource"
    },
    "OrderResource": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
        },
        "currencyCode": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "externalReferenceId": {
          "type": "string"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLineItemResource"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "orderId": {
          "type": "string"
        },
        "orderType": {
          "type": "string",
          "enum": [
            "NEW",
            "PREVIEW",
            "PREVIEW_RENEWAL",
            "RENEWAL",
            "RETURN",
            "TRANSFER"
          ]
        },
        "referenceOrderId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "title": "OrderResource"
    },
    "PairÂ«string,stringÂ»": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "left": {
          "type": "string"
        },
        "right": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "PairÂ«string,stringÂ»"
    },
    "Reference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Reference"
    },
    "ResellerChangeExecutionDto": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        }
      },
      "title": "ResellerChangeExecutionDto"
    },
    "ResourceLink": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PairÂ«string,stringÂ»"
          }
        },
        "method": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "title": "ResourceLink"
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "autoRenewal": {
          "$ref": "#/definitions/AutoRenewal"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "currentQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "offerId": {
          "type": "string"
        },
        "renewalDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "usedQuantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Subscription"
    },
    "SubscriptionDto": {
      "type": "object",
      "required": [
        "accountId",
        "anniversaryDate",
        "contractId",
        "licenses",
        "membershipId",
        "programType",
        "renewalCycle",
        "renewalDate",
        "routeToMarket",
        "sku",
        "unitOfMeasure"
      ],
      "properties": {
        "accountId": {
          "type": "string",
          "pattern": "^[\\p{Alnum}]{6,40}$"
        },
        "anniversaryDate": {
          "type": "string",
          "format": "date-time"
        },
        "autoRenewal": {
          "type": "boolean"
        },
        "contractId": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-]{1,40}$"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "createdSource": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "currentQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "forceDistinct": {
          "type": "boolean"
        },
        "fullSku": {
          "type": "string"
        },
        "licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseDto"
          }
        },
        "market_segment": {
          "type": "string",
          "enum": [
            "COM",
            "EDU",
            "GOV"
          ]
        },
        "membershipId": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-]{1,40}$"
        },
        "modifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "modifiedBy": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "modifiedSource": {
          "type": "string",
          "pattern": "^[\\p{Alnum}\\-\\_]{1,20}$"
        },
        "orderQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "programType": {
          "type": "string",
          "enum": [
            "VIPMP"
          ]
        },
        "renewalCycle": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "YEARLY"
          ]
        },
        "renewalDate": {
          "type": "string",
          "format": "date-time"
        },
        "renewalQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "resetRenewalQuantity": {
          "type": "boolean"
        },
        "routeToMarket": {
          "type": "string",
          "enum": [
            "MARKETPLACE",
            "PARTMP"
          ]
        },
        "sku": {
          "type": "string",
          "pattern": "^[\\p{Alnum}]{1,20}$"
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "CANCELLED",
            "EXPIRED",
            "INACTIVE",
            "INITIATED_RENEWAL",
            "PENDING",
            "PENDING_RENEWAL"
          ]
        },
        "statusCode": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string",
          "example": "dac366dd854a23a67cc973b3402d00NA",
          "description": "Subscription ID",
          "pattern": "^[\\p{Alnum}]{32}$"
        },
        "unitOfMeasure": {
          "type": "string",
          "enum": [
            "EA",
            "LICENSE"
          ]
        },
        "usedQuantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "SubscriptionDto"
    },
    "SubscriptionHistory": {
      "type": "object",
      "properties": {
        "subscriptionCount": {
          "type": "integer",
          "format": "int32"
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionDto"
          }
        }
      },
      "title": "SubscriptionHistory"
    },
    "SubscriptionHistoryDto": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "SubscriptionHistoryDto"
    },
    "SubscriptionHistoryResource": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResource"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "SubscriptionHistoryResource"
    },
    "SubscriptionResource": {
      "type": "object",
      "properties": {
        "autoRenewal": {
          "$ref": "#/definitions/AutoRenewal"
        },
        "creationDate": {
          "type": "string",
          "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
        },
        "currentQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "offerId": {
          "type": "string"
        },
        "renewalDate": {
          "type": "string",
          "example": "yyyy-MM-dd"
        },
        "status": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "usedQuantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "SubscriptionResource"
    },
    "TransferOffers": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "type": "string"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferOffersLineItemDto"
          }
        },
        "membershipId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "resellerId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "transferId": {
          "type": "string"
        }
      },
      "title": "TransferOffers"
    },
    "TransferOffersLineItemDto": {
      "type": "object",
      "properties": {
        "lineItemNumber": {
          "type": "integer",
          "format": "int32"
        },
        "offerId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "subscriptionId": {
          "type": "string"
        }
      },
      "title": "TransferOffersLineItemDto"
    },
    "TransferOffersLineItemResource": {
      "type": "object",
      "properties": {
        "lineItemNumber": {
          "type": "integer",
          "format": "int32"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "offerId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "subscriptionId": {
          "type": "string"
        }
      },
      "title": "TransferOffersLineItemResource"
    },
    "TransferOffersPreview": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "transferOffersPreviewOffers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferOffersPreviewOfferDto"
          }
        }
      },
      "title": "TransferOffersPreview"
    },
    "TransferOffersPreviewOfferDto": {
      "type": "object",
      "properties": {
        "offerId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "renewalDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "TransferOffersPreviewOfferDto"
    },
    "TransferOffersPreviewOfferResource": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "offerId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "renewalDate": {
          "type": "string",
          "example": "yyyy-MM-dd"
        }
      },
      "title": "TransferOffersPreviewOfferResource"
    },
    "TransferOffersPreviewResource": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferOffersPreviewOfferResource"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "TransferOffersPreviewResource"
    },
    "TransferOffersResource": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "example": "yyyy-MM-dd'T'HH:mm:ss'Z'"
        },
        "customerId": {
          "type": "string"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferOffersLineItemResource"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceLink"
          }
        },
        "membershipId": {
          "type": "string"
        },
        "resellerId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "transferId": {
          "type": "string"
        }
      },
      "title": "TransferOffersResource"
    }
  }
}